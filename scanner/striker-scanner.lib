#!/usr/bin/perl

use strict;
use warnings;

# Set static variables.
my $THIS_FILE = "striker-scanner.lib";

# This looks for all executable agents in scan.d and calls each it finds.
sub call_agents
{
	my ($conf) = @_;
	
	my $full_path =  get_current_directory($conf);
	   $full_path .= "/scan.d/";
	local(*DIRECTORY);
	opendir(DIRECTORY, $full_path);
	while(my $file = readdir(DIRECTORY))
	{
		next if $file eq ".";
		next if $file eq "..";
		# Skip anything with an extension.
		next if $file =~ /\./;
		my $this_path = $full_path.$file;
		call_specific_agent($conf, $this_path);
	}
	
	return(0);
}

# This calls a specific agent
sub call_specific_agent
{
	my ($conf, $agent) = @_;
	
	print "calling: [$agent]\n";
	my $file_handle = IO::Handle->new();
	open ($file_handle, "$agent 2>&1 |") or soft_die($conf, $THIS_FILE, __LINE__, 16, 
							template($conf, "./striker-scanner.template", "soft-die", {}, {
								message	=>	get_wrapped_string($conf, {
									key		=>	'error_0004', 
									variables	=>	{
										agent		=>	$agent,
										system_error	=>	$!
									}
								})
							})
						);
	my $agent_name;
	my $in_xml;
	my $xml_version;
	my $xml_contents;
	while(<$file_handle>)
	{
		chomp;
		my $line = $_;
		next if not $line;
		next if $line =~ /^\s+$/;
		if ($line =~ /Striker Agent: (.*)/)
		{
			$agent_name = $1;
		}
		# No agent name? No want!
		next if not $agent_name;
		if ($line =~ /<\?xml version="(.*?)" \?>/)
		{
			$xml_version = $1;
			$in_xml = 1;
		}
		if ($line =~ /<scanner /)
		{
			$in_xml = 1;
		}
		if ($in_xml)
		{
			$xml_contents .= "$line\n";
		}
		if ($line =~ /<\/scanner>/)
		{
			$in_xml = 0;
			next;
		}
		if (not $in_xml)
		{
			print "Agent: [$agent_name]: [$line]\n";
		}
	}
	# TODO: Check the exit code.
	$file_handle->close();
	
	if ($agent_name)
	{
		# Parse the XML
		# See: http://docs.activestate.com/activeperl/5.10/lib/XML/Simple/FAQ.html
		use XML::Simple qw(:strict);
		my $xs = XML::Simple->new(
			ForceArray	=>	['language', 'table', 'column', 'foreign_key'],
			KeyAttr		=>	{
				'language'	=>	'iso',
				'table'		=>	'name',
				'column'	=>	'name',
				'foreign_key'	=>	'name',
			});
		$conf->{$agent_name}{xml} = $xs->XMLin($xml_contents);
		
		print "===================================\n";
		#print "Agent: [$agent_name] XML:\n";
		#print "===================================\n";
		#print $xml_contents;
		#print "===================================\n";
		#use Data::Dumper;
		#print Dumper $conf->{$agent_name}{xml};
		#print "===================================\n";
		print "Name: [$conf->{$agent_name}{xml}->{name}]\n";
		foreach my $language (sort {$a cmp $b} keys %{$conf->{$agent_name}{xml}->{description}->{language}})
		{
			my $description =  $conf->{$agent_name}{xml}->{description}->{language}->{$language}->{content};
				$description =~ s/^\s+//g;
				$description =~ s/\s+$//g;
			print " - Language: [$language], default? [$conf->{$agent_name}{xml}->{description}->{language}->{$language}->{default}]\n";
			print "   Descriptions: [$description]\n";
		}
		print "Author: [$conf->{$agent_name}{xml}->{author}->{human} ($conf->{$agent_name}{xml}->{author}->{email}}]\n";
		print " - Company: [$conf->{$agent_name}{xml}->{author}->{company} ($conf->{$agent_name}{xml}->{author}->{url}}]\n";
		print "Parameters\n";
		foreach my $key (sort {$a cmp $b} keys %{$conf->{$agent_name}{xml}->{parameters}->{parameter}})
		{
			if ($key eq "description")
			{
				foreach my $language (sort {$a cmp $b} keys %{$conf->{$agent_name}{xml}->{parameters}->{parameter}->{$key}->{language}})
				{
					my $description =  $conf->{$agent_name}{xml}->{parameters}->{parameter}->{$key}->{language}->{$language}->{content};
					   $description =~ s/^\s+//g;
					   $description =~ s/\s+$//g;
					print " - Language: [$language], default? [$conf->{$agent_name}{xml}->{parameters}->{parameter}->{$key}->{language}->{$language}->{default}]\n";
					print "   Descriptions: [$description]\n";
				}
			}
			else
			{
				print " - key: [$key]\t-> [$conf->{$agent_name}{xml}->{parameters}->{parameter}->{$key}]\n";
			}
		}
 		print "SQL structure:\n";
# 		foreach my $table (sort {$a cmp $b} keys %{$conf->{$agent_name}{xml}->{sql}->{table}})
# 		{
# 			my $table_type = $conf->{$agent_name}{xml}->{sql}->{table}->{$table}->{type};
# 			print " - Table: [$table], type: [$table_type]\n";
# 			if ($table_type eq "data")
# 			{
# 				foreach my $column (sort {$a cmp $b} keys %{$conf->{$agent_name}{xml}->{sql}->{table}->{$table}->{column}})
# 				{
# 					my $column_type = $conf->{$agent_name}{xml}->{sql}->{table}->{$table}->{column}->{$column}->{type};
# 					my $not_null    = $conf->{$agent_name}{xml}->{sql}->{table}->{$table}->{column}->{$column}->{not_null}    ? $conf->{$agent_name}{xml}->{sql}->{table}->{$table}->{column}->{$column}->{not_null}    : "--";
# 					my $default     = $conf->{$agent_name}{xml}->{sql}->{table}->{$table}->{column}->{$column}->{'default'}   ? $conf->{$agent_name}{xml}->{sql}->{table}->{$table}->{column}->{$column}->{'default'}   : "--";
# 					my $comment     = $conf->{$agent_name}{xml}->{sql}->{table}->{$table}->{column}->{$column}->{comment}     ? $conf->{$agent_name}{xml}->{sql}->{table}->{$table}->{column}->{$column}->{comment}     : "";
# 					print "   - Column: [$column], type: [$column_type], null? [$not_null], default: [$default]\n";
# 					if ($comment)
# 					{
# 						# Ignore this in production
# 						print "     Comment: [$comment]\n";
# 					}
# 					if ($conf->{$agent_name}{xml}->{sql}->{table}->{$table}->{column}->{$column}->{primary_key})
# 					{
# 						my $pk_table = $conf->{$agent_name}{xml}->{sql}->{table}->{$table}->{column}->{$column}->{primary_key}->{table};
# 						my $pk_value = $conf->{$agent_name}{xml}->{sql}->{table}->{$table}->{column}->{$column}->{primary_key}->{value};
# 						print "     Primary key: [$pk_value($pk_table)]\n";
# 					}
# 					if ($conf->{$agent_name}{xml}->{sql}->{table}->{$table}->{column}->{$column}->{foreign_key})
# 					{
# 						foreach my $foreign_key (sort {$a cmp $b} keys %{$conf->{$agent_name}{xml}->{sql}->{table}->{$table}->{column}->{$column}->{foreign_key}})
# 						{
# 							my $fk_table  = $conf->{$agent_name}{xml}->{sql}->{table}->{$table}->{column}->{$column}->{foreign_key}->{$foreign_key}->{table};
# 							my $fk_column = $conf->{$agent_name}{xml}->{sql}->{table}->{$table}->{column}->{$column}->{foreign_key}->{$foreign_key}->{column};
# 							print "     Foreign key: [$foreign_key] references: [$fk_table($fk_column)]\n";
# 						}
# 					}
# 				}
# 			}
# 		}
		print "===================================\n";
		generate_sql_syntax($conf, $agent_name);
		print "===================================\n";
	}
	
	return(0);
}

sub generate_sql_syntax
{
	my ($conf, $agent_name) = @_;
	
	# Create the syntax for sequences first.
	foreach my $table (sort {$a cmp $b} keys %{$conf->{$agent_name}{xml}->{sql}->{table}})
	{
		my $table_type = $conf->{$agent_name}{xml}->{sql}->{table}->{$table}->{type};
		#print " - Table: [$table], type: [$table_type]\n";
		next if ($table_type ne "sequence");
		print "CREATE SEQUENCE $table\n";
		print "  START WITH 1\n";
		print "  INCREMENT BY 1\n";
		print "  NO MAXVALUE\n";
		print "  MINVALUE 0\n";
		print "  CACHE 1;\n";
		print "ALTER TABLE $table OWNER TO \"$conf->{db}{username}\";\n\n";
	}
	
	# Now normal tables.
	my $public    = "";
	my $history   = "";
	my $id_column = "";
	foreach my $table (sort {$a cmp $b} keys %{$conf->{$agent_name}{xml}->{sql}->{table}})
	{
		my $table_type = $conf->{$agent_name}{xml}->{sql}->{table}->{$table}->{type};
		#print " - Table: [$table], type: [$table_type]\n";
		next if ($table_type ne "data");
		$public  = "CREATE TABLE public.$table (\n";
		$history = "CREATE TABLE history.$table (\n";
	
		# First pass; Primary keys.
		foreach my $column (sort {$a cmp $b} keys %{$conf->{$agent_name}{xml}->{sql}->{table}->{$table}->{column}})
		{
			next if not $conf->{$agent_name}{xml}->{sql}->{table}->{$table}->{column}->{$column}->{primary_key};
			my $pk_table    = $conf->{$agent_name}{xml}->{sql}->{table}->{$table}->{column}->{$column}->{primary_key}->{table};
			my $pk_value    = $conf->{$agent_name}{xml}->{sql}->{table}->{$table}->{column}->{$column}->{primary_key}->{value};
			my $column_type = $conf->{$agent_name}{xml}->{sql}->{table}->{$table}->{column}->{$column}->{type};
			my $comment     = $conf->{$agent_name}{xml}->{sql}->{table}->{$table}->{column}->{$column}->{comment} ? $conf->{$agent_name}{xml}->{sql}->{table}->{$table}->{column}->{$column}->{comment} : "";
			my $is_id       = $conf->{$agent_name}{xml}->{sql}->{table}->{$table}->{column}->{$column}->{is_id}   ? $conf->{$agent_name}{xml}->{sql}->{table}->{$table}->{column}->{$column}->{is_id}   : "";
			if ($is_id)
			{
				$id_column = $column;
			}
			my $line =  "$column  $column_type  primary key  not null  default($pk_value($pk_table)),";
			   $line .= "  -- $comment" if $comment;
			$public  .= "  $line\n";
			
			# History doesn't need the primary key, it just needs a matching data type.
			$history .= "  $column  $column_type  not null,\n";
		}
		
		# Second pass is the main tables.
		foreach my $column (sort {$a cmp $b} keys %{$conf->{$agent_name}{xml}->{sql}->{table}->{$table}->{column}})
		{
			next if $conf->{$agent_name}{xml}->{sql}->{table}->{$table}->{column}->{$column}->{primary_key};
			next if $conf->{$agent_name}{xml}->{sql}->{table}->{$table}->{column}->{$column}->{foreign_key};
			my $column_type = $conf->{$agent_name}{xml}->{sql}->{table}->{$table}->{column}->{$column}->{type};
			my $not_null    = $conf->{$agent_name}{xml}->{sql}->{table}->{$table}->{column}->{$column}->{not_null}    ? $conf->{$agent_name}{xml}->{sql}->{table}->{$table}->{column}->{$column}->{not_null}    : "";
			my $default     = $conf->{$agent_name}{xml}->{sql}->{table}->{$table}->{column}->{$column}->{'default'}   ? $conf->{$agent_name}{xml}->{sql}->{table}->{$table}->{column}->{$column}->{'default'}   : "";
			my $comment     = $conf->{$agent_name}{xml}->{sql}->{table}->{$table}->{column}->{$column}->{comment}     ? $conf->{$agent_name}{xml}->{sql}->{table}->{$table}->{column}->{$column}->{comment}     : "";
			
			# Translate not null
			if ($not_null ne "")
			{
				if (($not_null eq "false") || 
				    ($not_null eq "0"))
				{
					$not_null = "";
				}
				elsif (($not_null eq "true") || 
				    ($not_null eq "not null") || 
				    ($not_null eq "1"))
				{
					$not_null = "not null";
				}
			}
			my $line =  "$column  $column_type";
			   $line .= "  $not_null" if $not_null;
			   $line .= "  $default" if $default;
			   $line .= ",";
			   $line .= "  -- $comment" if $comment;
			$public  .= "  $line\n";
			$history .= "  $line\n";
		}
		
		# Add the common columns.
		$public  .= "  modified_by integer not null,\n";
		$public  .= "  modified_date timestamp with timezone not null default now(),\n";
		
		# History always gets the extra history ID
		$history .= "  history_id  bigint  default(nextval('history_sequence')),\n";
		$history .= "  modified_by  integer  not null,\n";
		$history .= "  modified_date  timestamp with timezone  not null  default now(),\n";
		
		# One more loop looking for Foreign Keys.
		foreach my $column (sort {$a cmp $b} keys %{$conf->{$agent_name}{xml}->{sql}->{table}->{$table}->{column}})
		{
			next if not $conf->{$agent_name}{xml}->{sql}->{table}->{$table}->{column}->{$column}->{foreign_key};
			foreach my $foreign_key (sort {$a cmp $b} keys %{$conf->{$agent_name}{xml}->{sql}->{table}->{$table}->{column}->{$column}->{foreign_key}})
			{
				my $fk_table    = $conf->{$agent_name}{xml}->{sql}->{table}->{$table}->{column}->{$column}->{foreign_key}->{$foreign_key}->{table};
				my $fk_column   = $conf->{$agent_name}{xml}->{sql}->{table}->{$table}->{column}->{$column}->{foreign_key}->{$foreign_key}->{column};
				my $comment     = $conf->{$agent_name}{xml}->{sql}->{table}->{$table}->{column}->{$column}->{comment}     ? $conf->{$agent_name}{xml}->{sql}->{table}->{$table}->{column}->{$column}->{comment}     : "";
				my $line =  "FOREIGN KEY($column) REFERENCES $fk_table($fk_column),";
				$line .= "  -- $comment" if $comment;
				$public  .= "  $line\n";
				# Foreign Keys aren't critical in history
			}
		}
		
		# Close off the public schema
		$public  =~ s/,\n$/\n/i;
		$public  .= ");\n";
		$public  .= "ALTER TABLE public.$table OWNER TO \"$conf->{db}{username}\";\n";

		# Close off the history schema
		$history  =~ s/,\n$/\n/i;
		$history .= ");\n";
		$history .= "ALTER TABLE history.$table OWNER TO \"$conf->{db}{username}\";\n";
		print "$public\n";
		print "$history\n";
		
		# If i didn't find the ID column, error out.
		if (not $id_column)
		{
			die "No ID column found. Be sure the SQL schema has 'is_id=\"true\"' as an attribute for the primary key column\n";
		}
		
		# Now build the function
		print "CREATE FUNCTION history_$table() RETURNS \"trigger\"\n";
		print "  AS \$\$\n";
		print "  DECLARE\n";
		print "    hist_$table RECORD;\n";
		print "  BEGIN\n";
		print "    SELECT INTO history_$table * FROM public.$table WHERE $id_column=new.$id_column;\n";
		print "    INSERT INTO history.$table\n";
		my $first = 1;
		foreach my $column (sort {$a cmp $b} keys %{$conf->{$agent_name}{xml}->{sql}->{table}->{$table}->{column}})
		{
			next if $conf->{$agent_name}{xml}->{sql}->{table}->{$table}->{column}->{$column}->{foreign_key};
			if ($first)
			{
				$first = 0;
				print "      ($column, \n";
			}
			else
			{
				print "      $column, \n";
			}
		}
		print "      modified_by)\n";
		print "    VALUES\n";
		$first = 1;
		foreach my $column (sort {$a cmp $b} keys %{$conf->{$agent_name}{xml}->{sql}->{table}->{$table}->{column}})
		{
			next if $conf->{$agent_name}{xml}->{sql}->{table}->{$table}->{column}->{$column}->{foreign_key};
			if ($first)
			{
				$first = 0;
				print "      (hist_$table.$column, \n";
			}
			else
			{
				print "      hist_$table.$column, \n";
			}
		}
		print "      hist_users.modified_by);\n";
		print "    RETURN NULL;\n";
		print "  END;\$\$\n";
		print "LANGUAGE plpgsql;\n";
		print "ALTER FUNCTION history_$table() OWNER TO \"$conf->{db}{username}\";\n";
		print "CREATE TRIGGER trigger_$table AFTER INSERT OR UPDATE ON \"$table\" FOR EACH ROW EXECUTE PROCEDURE history_$table();\n\n";
	}
	
	return(0);
}

# This initializes a call; reads variables, etc.
sub initialize
{
	my ($caller) = @_;
	
	# Set default configuration variable values
	my ($conf) = initialize_conf($caller);

	# First up, read in the default strings file.
	read_strings($conf, $conf->{path}{words_common});
	read_strings($conf, $conf->{path}{words_file});

	# Read in the configuration file. If the file doesn't exist, initial 
	# setup will be triggered.
	read_configuration_file($conf, $caller);
	
	# Connect to the database
	#connect_to_db($conf); exit;
	
	return($conf);
}

# This connects to the database and stores the handle in $conf->{handles}{db}
sub connect_to_db
{
	my ($conf) = @_;
	
	my $db_driver   = "DBI:Pg";
	my $db_type     = $conf->{db}{type};
	my $db_name     = $conf->{db}{name};
	my $db_username = $conf->{db}{username};
	my $db_password = $conf->{db}{password};
	my $db_server   = $conf->{db}{server};
	my $db_port     = $conf->{db}{port};
	my $db_connect  = "$db_driver:dbname=$db_name;host=$db_server;port=$db_port";
	
	$conf->{handles}{db} = DBI->connect($db_connect, $db_username, $db_password, {
		RaiseError	=> 1,
		AutoCommit	=> 1,
		pg_enable_utf8	=> 1
	}) or die "Failed to connect to DB; $DBI::errstr\n";

	
	return($conf->{handles}{db});
}
# Set default configuration variable values
sub initialize_conf
{
	my ($caller) = @_;
	
	my $conf = {
		path				=>	{
			config_file			=>	"/etc/an/striker.conf",
			log_file			=>	"/var/log/striker-scanner.log",
			tput				=>	"/usr/bin/tput",
			words_common			=>	"./common.xml",
			words_file			=>	"./striker-scanner.xml",
		},
		# These are setuid root C-wrapper scripts that allow apache to
		# make system calls as root.
		setuid				=>	{
			'call_gather-system-info'	=>	"./call_gather-system-info",
		},
		sys				=>	{
			error_limit			=>	1000,
			language			=>	"en_CA",
			html_lang			=>	"en",
			skin				=>	"alteeve",
			version				=>	"0.0.1",
			log_level			=>	3,
			use_24h				=>	1,			# Set to 0 for am/pm time, 1 for 24h time
			date_seperator			=>	"-",			# Should put these in the strings.xml file
			time_seperator			=>	":",
			log_language			=>	"en_CA",
			system_timezone			=>	"America/Toronto",
			striker_user			=>	"root",			# This is needed as we'll be talking to hardware
			striker_group			=>	"root",
			output				=>	"text",
		},
		db				=>	{
			name				=>	"striker",
			user				=>	"alteeve",
			password			=>	"secret",
		},
		# Config values needed to managing strings
		strings				=>	{
			encoding			=>	"",
			force_utf8			=>	0,
			xml_version			=>	"",
		},
		# The actual strings
		string				=>	{},
	};
	
	return($conf);
}

# If the configuration file does not yet exist, it will trigger the initial
# installation of the system.
sub initial_configuration
{
	my ($conf, $caller) = @_;
	
	# If this isn't being run as root, exit. We need root access in order
	# to create log files and such.
	if (($< != 0) && ($> != 0))
	{
		# Not root.
		hard_die($conf, $THIS_FILE, __LINE__, 17, "Initial confguration is required. This reqires elevated priviledges in order to create log, configuration and other files, as well as set their permissions.\n");
	}
	else
	{
		# Make sure our log file exists.
		if (not -e $conf->{path}{log_file})
		{
			my $fh = IO::Handle->new();
			open ($fh, ">$conf->{path}{log_file}") or hard_die($conf, $THIS_FILE, __LINE__, 19, "Failed to write the file: [$conf->{path}{log_file}], the error was: $!\n");
			$fh->close();
			
			### TODO: If the UID/GID are not found, the user needs
			###       to be created.
			# Get the UID and GID for the striker user and group.
			$conf->{sys}{striker_uid} = getpwnam($conf->{sys}{striker_user});
			$conf->{sys}{striker_gid} = getgrnam($conf->{sys}{striker_group});
			chown $conf->{sys}{striker_uid}, $conf->{sys}{striker_gid}, $conf->{path}{log_file} or die "What? $!\n";
		}
		
		# If the database will be local, make sure the postgresql RPMs are installed.
		
		# Check for '/var/lib/pgsql/data'. If it doesn't exist, run
		# '/usr/bin/postgresql-setup initdb'
	}
	
	my $db_type     = "Pg";
	my $db_server   = "localhost";
	my $db_port     = 5432;
	my $db_name     = "striker-scanner";
	my $db_user     = "alteeve";
	my $db_password = "";
	while (1)
	{
		# Tell the user we are starting.
		my $yes_answer  = get_string($conf, {key => 'answer_0000'});
		my $yes_short   = get_string($conf, {key => 'answer_0001'});
		my $no_answer   = get_string($conf, {key => 'answer_0002'});
		my $no_short    = get_string($conf, {key => 'answer_0003'});
		my $lang_prompt = get_string($conf, {key => 'prompt_0000'});
		my $language    = $conf->{sys}{language};
		system 'clear';
		print "\n", get_wrapped_string($conf, {key => 'install_0000', variables => {config_file => $conf->{path}{config_file}}}), "\n\n";
		
		# Let the user choose a language.
		my $i = 1;
		my @languages;
		my $default_language;
		foreach my $language (sort {$a cmp $b} keys %{$conf->{string}{lang}})
		{
			if ($language eq $conf->{sys}{language})
			{
				$default_language = $i;
			}
			my $say_language = $language;
			if ($conf->{string}{lang}{$language}{lang}{long_name})
			{
				$say_language = "$language ($conf->{string}{lang}{$language}{lang}{long_name})";
			}
			print "$i: $say_language\n";
			$languages[$i] = $language;
			$i++;
		}
		print "$lang_prompt ($default_language: $conf->{sys}{language}): ";
		my $language_answer = <STDIN>;
		chomp($language_answer);
		if ($language_answer)
		{
			$conf->{sys}{language} = $languages[$language_answer];
			next;
		}
		else
		{
			print "\n";
		}
		# As the database type (disabled for now)
		#print get_wrapped_string($conf, {key => 'install_0003', variables => { answer => "$db_type_answer"}}), "\n";
		#my $db_type_answer = <STDIN>;
		#chomp($db_type_answer);
		#$db_type = $db_type_answer if $db_type_answer;
		
		# Ask for the database server hostname or IP
		print get_wrapped_string($conf, {key => 'install_0004', variables => { answer => "$db_server"}});
		my $db_server_answer = <STDIN>;
		chomp($db_server_answer);
		$db_server = $db_server_answer if $db_server_answer;
		print " - $db_server\n";
		
		# Ask for the database TCP port
		print get_wrapped_string($conf, {key => 'install_0005', variables => { answer => "$db_port"}});
		my $db_port_answer = <STDIN>;
		chomp($db_port_answer);
		$db_port = $db_port_answer if $db_port_answer;
		print " - $db_port\n";
		
		# Ask for the database name.
		print get_wrapped_string($conf, {key => 'install_0006', variables => { answer => "$db_name"}});
		my $db_name_answer = <STDIN>;
		chomp($db_name_answer);
		$db_name = $db_name_answer if $db_name_answer;
		print " - $db_name\n";
		
		# Ask for the database user.
		print get_wrapped_string($conf, {key => 'install_0007', variables => { answer => "$db_user"}});
		my $db_user_answer = <STDIN>;
		chomp($db_user_answer);
		$db_user = $db_user_answer if $db_user_answer;
		print " - $db_user\n";
		
		# Ask for the database password.
		print get_wrapped_string($conf, {key => 'install_0008'});
		ReadMode('noecho');
		my $db_password_answer = <STDIN>;
		ReadMode('restore');
		chomp($db_password_answer);
		$db_password = $db_password_answer if $db_password_answer;
		print "\n - ****\n";
		
		print "\n", get_wrapped_string($conf, {key => 'install_0001', variables => {
			'db::type'	=>	"$db_type",
			'db::server'	=>	"$db_server",
			'db::port'	=>	"$db_port",
			'db::name'	=>	"$db_name",
			'db::user'	=>	"$db_user",
			'db::password'	=>	"****",
		}});
		my $save = <STDIN>;
		chomp($save);
		if ((lc($save) eq lc($yes_answer)) or (lc($save) eq lc($yes_short)))
		{
			# Instead of passing in the values again, I will
			# prepare the contents of the file now and pass that
			# in. This is effectively the same call as above, but
			# force wrap to 80 columns.
			my $body = get_wrapped_string($conf, {key => 'install_0002', variables => {
				'db::type'	=>	"$db_type",
				'db::server'	=>	"$db_server",
				'db::port'	=>	"$db_port",
				'db::name'	=>	"$db_name",
				'db::user'	=>	"$db_user",
				'db::password'	=>	"$db_password",
			}}, {
				wrap_to		=>	80
			});
			write_configuration_file($conf, $body);
			last;
		}
		else
		{
			print get_wrapped_string($conf, {key => 'install_0010'}), "\n\n";
		}
	}
	
	return(0);
}

# This writes out an initial configuration file.
sub write_configuration_file
{
	my ($conf, $body) = @_;
	
	print get_wrapped_string($conf, {key => 'install_0009'}), "\n";
	
	# Check for parent directories and create if needed.
	my ($path, $file) = ($conf->{path}{config_file} =~ /^(.*)\/(.*?)$/);
	if (not -e $path)
	{
		# Create the path.
		my $directory = "";
		foreach my $name (split/\//, $path)
		{
			next if not $name;
			$directory .= "/$name";
			if (not -e $directory)
			{
				mkdir $directory or soft_die($conf, $THIS_FILE, __LINE__, 16, 
							template($conf, "./striker-scanner.template", "soft-die", {}, {
								message	=>	get_wrapped_string($conf, {
									key		=>	'error_0003', 
									variables	=>	{
										directory	=>	$directory,
										system_error	=>	$!
									}
								})
							})
						);
			}
		}
	}
	
	my $fh = IO::Handle->new();
	# The 'soft_die' function is a little complex, given the need to pull from a template and translate a string.
	open ($fh, ">$conf->{path}{config_file}") or soft_die($conf, $THIS_FILE, __LINE__, 16, 
							template($conf, "./striker-scanner.template", "soft-die", {}, {
								message	=>	get_wrapped_string($conf, {
									key		=>	'error_0001', 
									variables	=>	{
										config_file	=>	$conf->{path}{config_file},
										system_error	=>	$!
									}
								})
							})
						);
	print $fh $body;
	$fh->close();
	
	return(0);
}

# Read in the configuration file. If the file doesn't exist, initial setup will
# be triggered.
sub read_configuration_file
{
	my ($conf, $caller) = @_;
	
	if (not -e $conf->{path}{config_file})
	{
		# Must be a new install.
		initial_configuration($conf, $caller);
	}
	else
	{
		my $read       = IO::Handle->new();
		my $shell_call = "$conf->{path}{config_file}";
		# This is causing a loop... can't call 'error' this early.
		open ($read, $shell_call) or hard_die($conf, $THIS_FILE, __LINE__, 1, "Failed to read: [$shell_call]. The error was: $!\n");
		binmode $read, ":utf8:";
		while (<$read>)
		{
			chomp;
			my $line = $_;
			
			# Protect '#!....!#' substitution variables.
			$line =~ s/#!/_!\|/;
			$line =~ s/!#/\|!_/;
			
			# Now remove anything after a hash
			$line =~ s/#(.*)//;
			
			# And restore the substitution variables.
			$line =~ s/_!\|/#!/;
			$line =~ s/\|!_/!#/;
			
			# Skip lines without an = sign... no idea why they'd
			# be here.
			next if ($line !~ /=/);
			
			# Split on the first = sign
			my ($variable, $value) = split/=/, $line, 2;
			
			# Crop leading and trailing spaces from the variables
			# and values.
			$variable =~ s/^\s+//;
			$variable =~ s/\s+$//;
			$value    =~ s/^\s+//;
			$value    =~ s/\s+$//;

			# Check if the variable needs to be split on '::' and
			# stored in multi-dimensional hashes.
			if ( $variable =~ /::/ )
			{
				_make_hash_reference($conf, $variable, $value);
			}
			else
			{
				# Simple variable, I can just store it's value.
				$conf->{$variable} = $value;
			}
		}
		$read->close();
	}
	
	return(0);
}

1;
